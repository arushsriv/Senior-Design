{"ast":null,"code":"var _jsxFileName = \"/Users/water/Senior-Design/bank-api/src/PlaidConnect.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport \"./PlaidConnect.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PlaidConnect(props) {\n  _s();\n  const [token, setToken] = useState(null);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const onSuccess = useCallback(async publicToken => {\n    setLoading(true);\n    await fetch(\"/api/exchange_public_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        public_token: publicToken\n      })\n    });\n    await getBalance();\n  }, []);\n\n  // Creates a Link token\n  const createLinkToken = React.useCallback(async () => {\n    // For OAuth, use previously generated Link token\n    if (window.location.href.includes(\"?oauth_state_id=\")) {\n      const linkToken = localStorage.getItem('link_token');\n      setToken(linkToken);\n    } else {\n      const response = await fetch(\"/api/create_link_token\", {});\n      const data = await response.json();\n      setToken(data.link_token);\n      localStorage.setItem(\"link_token\", data.link_token);\n    }\n  }, [setToken]);\n\n  // Fetch balance data\n  const getBalance = React.useCallback(async () => {\n    setLoading(true);\n    const response = await fetch(\"/api/balance\", {});\n    const data = await response.json();\n    setData(data);\n    setLoading(false);\n  }, [setData, setLoading]);\n  let isOauth = false;\n  const config = {\n    token,\n    onSuccess\n  };\n\n  // For OAuth, configure the received redirect URI\n  if (window.location.href.includes(\"?oauth_state_id=\")) {\n    config.receivedRedirectUri = window.location.href;\n    isOauth = true;\n  }\n  const {\n    open,\n    ready\n  } = usePlaidLink(config);\n  useEffect(() => {\n    if (token == null) {\n      createLinkToken();\n    }\n    if (isOauth && ready) {\n      open();\n    }\n  }, [token, isOauth, ready, open]);\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Step 1: Link your bank account(s) to Budgify!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Budgify uses Plaid to verify your bank account information and, periodically, your bank account balance to check if you have enough funds to cover certain transactions. If your bank is eligible for instant verification, you'll be prompted to add your online banking username and password (or other identifying information) after selecting your bank.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => open(),\n          disabled: !ready,\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Click here to link your bank account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), !loading && data != null && Object.entries(data).map((entry, i) => /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: JSON.stringify(entry[1], null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(PlaidConnect, \"n0NUqVt+TgDld2yb9Klifxgo0o0=\", false, function () {\n  return [usePlaidLink];\n});\n_c = PlaidConnect;\nexport default PlaidConnect;\nvar _c;\n$RefreshReg$(_c, \"PlaidConnect\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","usePlaidLink","jsxDEV","_jsxDEV","PlaidConnect","props","_s","token","setToken","data","setData","loading","setLoading","onSuccess","publicToken","fetch","method","headers","body","JSON","stringify","public_token","getBalance","createLinkToken","window","location","href","includes","linkToken","localStorage","getItem","response","json","link_token","setItem","isOauth","config","receivedRedirectUri","open","ready","children","class","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","Object","entries","map","entry","i","_c","$RefreshReg$"],"sources":["/Users/water/Senior-Design/bank-api/src/PlaidConnect.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { usePlaidLink } from \"react-plaid-link\";\nimport \"./PlaidConnect.scss\";\n\nfunction PlaidConnect(props) {\n  const [token, setToken] = useState(null);\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const onSuccess = useCallback(async (publicToken) => {\n    setLoading(true);\n    await fetch(\"/api/exchange_public_token\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ public_token: publicToken }),\n    });\n    await getBalance();\n  }, []);\n\n  // Creates a Link token\n  const createLinkToken = React.useCallback(async () => {\n    // For OAuth, use previously generated Link token\n    if (window.location.href.includes(\"?oauth_state_id=\")) {\n      const linkToken = localStorage.getItem('link_token');\n      setToken(linkToken);\n    } else {\n      const response = await fetch(\"/api/create_link_token\", {});\n      const data = await response.json();\n      setToken(data.link_token);\n      localStorage.setItem(\"link_token\", data.link_token);\n    }\n  }, [setToken]);\n\n  // Fetch balance data\n  const getBalance = React.useCallback(async () => {\n    setLoading(true);\n    const response = await fetch(\"/api/balance\", {});\n    const data = await response.json();\n    setData(data);\n    setLoading(false);\n  }, [setData, setLoading]);\n\n  let isOauth = false;\n\n  const config = {\n    token,\n    onSuccess,\n  };\n\n  // For OAuth, configure the received redirect URI\n  if (window.location.href.includes(\"?oauth_state_id=\")) {\n    config.receivedRedirectUri = window.location.href;\n    isOauth = true;\n  }\n  const { open, ready } = usePlaidLink(config);\n\n  useEffect(() => {\n    if (token == null) {\n      createLinkToken();\n    }\n    if (isOauth && ready) {\n      open();\n    }\n  }, [token, isOauth, ready, open]);\n  \n  return (\n    <body>\n      <div class='container'>\n        <div class='header'>\n          <h1>Step 1: Link your bank account(s) to Budgify!</h1>\n          <p>Budgify uses Plaid to verify your bank account information and, periodically, your bank account balance to check if you have enough funds to cover certain transactions. If your bank is eligible for instant verification, you'll be prompted to add your online banking username and password (or other identifying information) after selecting your bank.</p>\n        </div>\n        <div class='center'>\n          <button onClick={() => open()\n            } disabled={!ready}>\n            <strong>Click here to link your bank account</strong>\n          </button>\n\n          {!loading &&\n            data != null &&\n            Object.entries(data).map((entry, i) => (\n              <pre key={i}>\n                <code>{JSON.stringify(entry[1], null, 2)}</code>\n              </pre>\n            )\n          )}\n        </div>\n      </div>\n    </body>\n  );\n}\n\nexport default PlaidConnect;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}